<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://ykkim97.github.io/tag/javascript/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://ykkim97.github.io/" rel="alternate" type="text/html" />
  <updated>2022-06-16T17:31:25+09:00</updated>
  <id>https://ykkim97.github.io/tag/javascript/feed.xml</id>

  
  
  

  
    <title type="html">YoungGwon’s IT Tech Blog | </title>
  

  
    <subtitle>IT 기술 블로그입니다.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">JS Event Loop, 자바스크립트 동작 원리</title>
      <link href="https://ykkim97.github.io/javascript-eventloop" rel="alternate" type="text/html" title="JS Event Loop, 자바스크립트 동작 원리" />
      <published>2022-06-14T01:22:00+09:00</published>
      <updated>2022-06-14T01:22:00+09:00</updated>
      <id>https://ykkim97.github.io/javascript-eventloop</id>
      <content type="html" xml:base="https://ykkim97.github.io/javascript-eventloop">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;JavaScript은 다음과 같이 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./javascript-eventloop&quot;&gt;JS Event Loop, 자바스크립트 동작 원리&lt;/a&gt;&lt;/li&gt;
    
&lt;/ul&gt;

&lt;h2 id=&quot;js-event-loop에-대해서&quot;&gt;JS Event Loop에 대해서&lt;/h2&gt;

&lt;h3 id=&quot;javascript-engine&quot;&gt;Javascript Engine?&lt;/h3&gt;

&lt;p&gt;일단 Javascript Engine과 Rendering Engine은 다릅니다. Rendering Engine(Layout Engine)은 HTML과 CSS로 작성된 마크업 관련 코드를 
웹 페이지에 렌더링하는, 그려주는 역할을 하는 것이고 반면 Javascript Engine은 자바스크립트로 작성된 코드를 해석하고 실행시켜주는 
인터프리터입니다.
&lt;br /&gt;
구글의 V8과 같은 자바스크립트엔진은 Call Stack, Task Queue, Heap으로 크게 나뉘고 추가적으로 Event Loop라는것이 있는데 Task queue에 
들어가는 task들을 관리합니다.&lt;/p&gt;

&lt;h3 id=&quot;call-stack&quot;&gt;Call Stack&lt;/h3&gt;

&lt;p&gt;자바스크립트는 한개의 Call Stack을 사용합니다. 코드 요청이 들어올 때마다 순차적으로 Call Stack에 담아서 처리합니다. 메소드가 실행이되면 
Call Stack에 새로운 프레임이 생기고, push되고 메소드의 실행이 종료되면 해당 프레임은 pop됩니다.&lt;/p&gt;

&lt;h3 id=&quot;heapmemory-heap&quot;&gt;Heap(Memory Heap)&lt;/h3&gt;

&lt;p&gt;동적으로 생성된 객체는 Heap에 할당이 됩니다. 구조화 되지 않는 더미같은 메모리 영역을 힙(heap)이라고 합니다. 
정리하면 변수 선언, 함수 저장, 호출 이런 작업이 발생하는 공간입니다.&lt;/p&gt;

&lt;h3 id=&quot;task-queueevent-queue&quot;&gt;Task Queue(Event Queue)&lt;/h3&gt;

&lt;p&gt;처리해야하는 Task들을 임시로 저장하는 대기 큐가 존재합니다. 이것을 Task Queue라고 합니다. 이 Task Queue에 존재하는 Task들은 Call Stack이 
비어졌을 때 대기 큐에 들어온 순서대로 Call Stack에 올려져서 수행됩니다. 자바스크립트에서는 비동기적으로 호출되는 함수들은 Call Stack으로 바로
들어가지 않고 Task Queue에 들어가게 됩니다. 예를들어 Ajax요청코드, 이벤트리스너, setTimeout같은 것들이 있습니다. 
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;결론&quot;&gt;결론&lt;/h3&gt;

&lt;p&gt;자바스크립트 코드가 실행되면 Call Stack에 하나씩 들어가서 처리가되는데 Ajax요청코드, 이벤트리스너, setTimeout같은 것들은 Task Queue에 들어가서 
대기합니다. Event Loop가 Call Stack이 비어있는지 확인하고 비어있다면 Task Queue에서 하나씩 Call Stack으로 보냅니다. 보내진 작업은 똑같은 과정을 
거쳐서 처리가 되는 것입니다.
&lt;br /&gt;
&lt;br /&gt;
 End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="javascript" />
      

      
        <summary type="html">JavaScript은 다음과 같이 구성되어 있습니다. JS Event Loop, 자바스크립트 동작 원리</summary>
      

      
      
    </entry>
  
</feed>
