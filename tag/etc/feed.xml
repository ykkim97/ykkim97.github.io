<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://ykkim97.github.io/tag/etc/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://ykkim97.github.io/" rel="alternate" type="text/html" />
  <updated>2023-01-03T17:43:10+09:00</updated>
  <id>https://ykkim97.github.io/tag/etc/feed.xml</id>

  
  
  

  
    <title type="html">YoungGwon’s IT Tech Blog | </title>
  

  
    <subtitle>IT 기술 블로그입니다.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">GET과 POST의 특징</title>
      <link href="https://ykkim97.github.io/etc-getandpost" rel="alternate" type="text/html" title="GET과 POST의 특징" />
      <published>2022-10-12T19:40:00+09:00</published>
      <updated>2022-10-12T19:40:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-getandpost</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-getandpost">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;get&quot;&gt;GET&lt;/h2&gt;

&lt;p&gt;GET은 서버로부터 데이터를 가져오도록 요청하는 메소드입니다.&lt;br /&gt;
예를 들어, 게시물을 조회할 때 사용하는 것이 GET요청입니다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1) GET요청은 캐시가 가능하다.&lt;br /&gt;
2) GET요청은 브라우저 히스토리에 남는다.&lt;br /&gt;
3) GET요청은 길이제한이 있다. &lt;br /&gt;
4) HTTP메세지에 body가 없다.&lt;br /&gt;
5) 멱등이다. (* 멱등 : 연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질, 데이터를 조회하는 것이니까 여러번 요청해도 똑같은 결과일 것)&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;post&quot;&gt;POST&lt;/h2&gt;

&lt;p&gt;POST는 리소스를 생성하거나 업데이트하기위해 서버에게 데이터를 보내는 데 사용됩니다. &lt;br /&gt;
예를 들어, 게시물을 작성하는 것이 POST요청입니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1) POST요청은 캐시가 안된다.&lt;br /&gt;
2) POST요청은 브라우저 히스토리에 안남는다.&lt;br /&gt;
3) POST요청은 데이터 길이제한이 없다.&lt;br /&gt;
4) HTTP메세지에 body가 있다.&lt;br /&gt;
5) 멱등이 아니다. (리소스를 새로 생성하거나 업데이트하는 것이기 때문에 멱등이 아니다)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점</title>
      <link href="https://ykkim97.github.io/etc-httphttps" rel="alternate" type="text/html" title="HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점" />
      <published>2022-10-09T22:40:00+09:00</published>
      <updated>2022-10-09T22:40:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-httphttps</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-httphttps">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HTTP(&lt;/strong&gt;HyperText Transfer Protocol)로&lt;/p&gt;

&lt;p&gt;HTTP는 인터넷에서 데이터를 주고 받을 수 있는 프로토콜(규칙,규약)입니다.&lt;/p&gt;

&lt;p&gt;서버와 클라이언트가 데이터를 주고받을 때 암호화되지 않은 그대로 데이터가 오고 갑니다. 따라서 개인정보같은 중요한 정보를 중간에 제 3자가 알 수 있어 보안에 취약하다.&lt;/p&gt;

&lt;h2 id=&quot;https&quot;&gt;HTTPS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HTTPS(&lt;/strong&gt;HyperText Transfer Protocol Secure)는 HTTP에 Secure가 붙은 것으로, HTTP에 보안 기능이 추가된 형태이다.&lt;/p&gt;

&lt;p&gt;보통은 전자상거래같은데에서 많이 쓰였으나 요즘 구글이 HTTPS가 적용된 웹사이트는 검색결과표시에 있어서 가산점을 줍니다. 대부분 https인 사이트가 많습니다.&lt;/p&gt;

&lt;h2 id=&quot;https의-특징&quot;&gt;HTTPS의 특징&lt;/h2&gt;

&lt;p&gt;HTTP웹사이트보다 안전한 것이 HTTPS로 된 사이트입니다. 어떤 웹사이트에 보내는 정보를 누가 훔쳐보지 못하도록 암호화를 한다. 
예를 들어 네이버에 로그인할 때 ID와 Password를 입력하고 로그인을 하면 네이버 서버에 ID와 Password를가 전송되는데 그냥 HTTP로 보내버리면 이 정보들이 입력한 텍스트 그대로 전송됩니다. 중간에 누군가가 훔쳐보기 딱좋죠. 그런데 HTTPS는 이 정보를 네이버만 알아볼 수 있는 텍스트로 변경해서 보냅니다.
암호화를 하는 것이죠.&lt;/p&gt;

&lt;p&gt;또한 HTTPS는 접속한 사이트가 신뢰할 수 있는 사이트인지 판별해준다. 네이버와 비슷하게 생긴 피싱사이트가 있다고 가정해보겠습니다. 사용자가 피싱 사이트에 아이디와 비번을 입력하면 피싱사이트가 계정정보를 알게 되겠죠. HTTPS는 이런 피싱 사이트를 걸러낼 수 있도록 함. 기관으로부터 검증된 사이트만 주소에 HTTPS 사용이 허가되고 그냥 HTTP만 사용하는 사이트들은 이제 주소 창에 안전하지 않다는 표시가 뜨게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;사전-지식&quot;&gt;사전 지식&lt;/h2&gt;

&lt;p&gt;HTTPS의 과정을 알기전에 필요한 사전 지식이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;대칭키 암호화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클라이언트와 서버가 동일한 키를 사용해 암호화/복호화를 진행함
키가 노출되면 매우 위험하지만 연산 속도가 빠름&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;비대칭키 암호화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1개의 쌍으로 구성된 공개키와 개인키를 암호화/복호화 하는데 사용함
키가 노출되어도 비교적 안전하지만 연산 속도가 느림&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CA(Certificate Authority)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;해덩 서버에서 뿌린 공개키가 맞는지 인증해주는 역할을 하는 공인된 민간기업들을 의미함. CA는 아무회사나 할 수 있는 것이 아니며 엄격한 인증과정을 거쳐야한다.
브라우저에는 이 CA들의 목록이 내장되어 있다.&lt;/p&gt;

&lt;h2 id=&quot;과정&quot;&gt;과정&lt;/h2&gt;

&lt;p&gt;HTTPS는 대칭키 암호화 방식과 비대칭키 암호화 방식을 모두 사용하고 있습니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일단 클라이언트 입장에서 네이버 서버와 데이터를 주고받는다고 생각해보겠습니다.&lt;br /&gt;
클라이언트는 아직 네이버 서버를 신뢰할 수 없습니다. 그래서 서로 탐색하는 과정(handshake)을 실시합니다. 
먼저 클라이언트에서 한 랜덤 데이터를 생성해서 네이버 서버에 보냅니다. 그러면 그것을 받은 네이버 서버도 역시 랜덤데이터를 생성해서 해당 서버의 인증서와 함께 다시 클라이언트로 보내어 응답합니다. handshake를 한것이죠.&lt;/p&gt;

&lt;p&gt;그다음 클라이언트는 받은 인증서가 진짜인지 브라우저에 내장된 CA들의 정보를 보고 확인합니다. CA의 인증을 받은 인증서들은 해당 CA의 개인키로 암호화되있는데, 인증서가 진짜라면 브라우저에
저장된 CA의 공개키로 복호화하여 풀 수 있습니다. 만약 CA 정보들 중에 받은 인증서에 해당하는 것이 없으면 브라우저 주소창에 “Not secure”와 같은 경고가 뜨게 됩니다.
그래서 CA의 공개키로 복호화를 성공으로 마친 인증서에는 네이버 서버의 공개키가 들어있습니다.&lt;/p&gt;

&lt;p&gt;이전에 handshake를 통해서 생성된 두 랜덤데이터를 혼합해서 임시키를 만들고 이 임시키를, 복호화한 인증서 안에 있는 네이버 서버의 공개키로 암호화해서 네이버 서버에 보냅니다. 
그러면 양쪽에서 일련의 과정을 거쳐 동일한 대칭키가 만들어집니다. 만들어진 대칭키는 해당 네이버서버와 클라이언트만 가지고 있게 됩니다.
따라서 이 둘만 대칭키를 가지고 있기 때문에 제 3자가 중간에 알아볼 수 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;https의-장점&quot;&gt;HTTPS의 장점&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;암호화가 적용되어 HTTP보다 보안이 좋다.&lt;/li&gt;
  &lt;li&gt;HTTPS가 HTTP보다 더 안전하다고 판단하기 때문에 HTTPS가 더 검색결과표시에 유리하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">알면 유용한 vscode 단축키들</title>
      <link href="https://ykkim97.github.io/etc-vscodekey" rel="alternate" type="text/html" title="알면 유용한 vscode 단축키들" />
      <published>2022-10-02T21:00:00+09:00</published>
      <updated>2022-10-02T21:00:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-vscodekey</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-vscodekey">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
알면 유용한 vscode 단축키들을 정리해보겠습니다.&lt;/p&gt;

&lt;p&gt;1) ctrl + /&lt;/p&gt;

&lt;p&gt;주석 처리&lt;/p&gt;

&lt;p&gt;2) ctrl + B&lt;/p&gt;

&lt;p&gt;왼쪽 사이드바 토글 ( 파일목록창 숨기기/보이기 )&lt;/p&gt;

&lt;p&gt;3) ctrl + shift + F&lt;/p&gt;

&lt;p&gt;프로젝트 폴더 전체를 대상으로 검색할 수 있습니다.&lt;/p&gt;

&lt;p&gt;4) ctrl + D&lt;/p&gt;

&lt;p&gt;커서가 위치하는 단어와 일치하는 단어를 선택&lt;/p&gt;

&lt;p&gt;5) ctrl + G&lt;/p&gt;

&lt;p&gt;빠른 행 이동
(명령 후 이동하고싶은 코드라인 입력)&lt;/p&gt;

&lt;p&gt;6) alt + 마우스 좌클릭&lt;/p&gt;

&lt;p&gt;커서 추가하기(부분 선택)&lt;/p&gt;

&lt;p&gt;7) ctrl + X&lt;/p&gt;

&lt;p&gt;잘라내기 (코드 한 줄을 빠르게 삭제할 때 사용하면 좋음)&lt;/p&gt;

&lt;p&gt;8) ctrl + Enter&lt;/p&gt;

&lt;p&gt;다음 행 커서 이동(어중간하게 커서가 위치할 경우 유용)&lt;/p&gt;

&lt;p&gt;9) ctrl + `&lt;/p&gt;

&lt;p&gt;터미널 열기&lt;/p&gt;

&lt;p&gt;10) ctrl + 페이지업다운(PGUP/PGDN)&lt;/p&gt;

&lt;p&gt;열려있는 코드 탭을 이동할 수 있다.&lt;/p&gt;

&lt;p&gt;11) alt + shift + 위아래 방향키&lt;/p&gt;

&lt;p&gt;커서가 위치한 코드 라인을 방향키 방향으로 복제해준다.&lt;/p&gt;

&lt;p&gt;12) alt + 위아래 방향키&lt;/p&gt;

&lt;p&gt;커서가 위치한 코드 라인을 이동시켜준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">크로스 브라우징이란?</title>
      <link href="https://ykkim97.github.io/etc-crossbrowsing" rel="alternate" type="text/html" title="크로스 브라우징이란?" />
      <published>2022-09-17T22:33:00+09:00</published>
      <updated>2022-09-17T22:33:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-crossbrowsing</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-crossbrowsing">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
이번 글에서는 크로스 브라우징에 대해서 간단히 정리해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;크로스-브라우징&quot;&gt;크로스 브라우징&lt;/h2&gt;

&lt;p&gt;크로스 브라우징(Cross Browsing)이란 표준 웹 기술을 채용하여 다른 기기 또는 플랫폼에 따라 다르게 구현되는 기술을 비슷하게 만들고, 
동시에 어느 한쪽에 치우치지 않도록 공통요소를 사용하여 웹페이지를 제작하는 것을 말합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
브라우저의 종류는 여러가지가 있습니다. 인터넷 익스플로러, 크롬, 파이어폭스, 사파이, 오페라, 엣지 등의 여러가지 브라우저가 있죠. 
개발자가 만든 웹페이지는 브라우저를 통해서 화면에 보여지는데 브라우저의 종류에 따라서 각각 다르게 보여질 수도 있습니다. 
그러니까 서로 다른 브라우저들끼리 잘 호환될 수 있도록 하는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
하지만 웹페이지가 모든 브라우저에서 100% 똑같이 보여져야한다, 똑같이 웹페이지를 만들어야한다는 의미가 아닙니다.
기기나 플랫폼들이 너무나 다양하고, 브라우저마다 사용하는 렌더링엔진도 각기 다르게 때문에 모두 똑같이 보이도록 만들기는 사실상 어렵습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
대신, 어떤 브라우저에서 접근하던, 최대한 호환되고 그 웹페이지에서 제공하는 정보와 기능을 모두 제공받을 수 있도록 고려해야합니다. 즉 일관된 정보와 기능을 제공할 수 있어야하는 것이죠.&lt;/p&gt;

&lt;h2 id=&quot;크로스-브라우징의-기준&quot;&gt;크로스 브라우징의 기준&lt;/h2&gt;

&lt;p&gt;그러면 크로스 브라우징의 기준, 범위는 무엇일까요?&lt;br /&gt;
바로 서비스 하는 대상, 고객에 따라서 달라져야할 것입니다. 어떤 브라우저를 많이 사용하는지 브라우저 점유율에 따라서 크로스 브라우징의 범위가 결정되곤 합니다.&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;p&gt;크로스 브라우징은 모든 브라우저에서 동일하게 보여지는 것이 아니라, 어떤 브라우저에서도 일관된 서비스를 제공하게 하는 것.&lt;br /&gt;
크로스 브라우징을 위해 모든 브라우저에서 어떻게 보여지는지 직접 테스트해볼 필요가 있고, 처음 웹페이지를 만들기전 기획단계에서 어떤 브라우저를 기준으로 삼을 것인지, 브라우저 버전은 어떻게 할것인지 등을 고려할 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">쿠키와 웹스토리지에 대해</title>
      <link href="https://ykkim97.github.io/etc-webstorage" rel="alternate" type="text/html" title="쿠키와 웹스토리지에 대해" />
      <published>2022-08-25T23:20:00+09:00</published>
      <updated>2022-08-25T23:20:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-webstorage</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-webstorage">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
이번 글에서는 쿠키와 웹스토리지(로컬스토리지, 세션스토리지)에 대해서 정리해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;배경&quot;&gt;배경&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
HTTP는 클라이언트와 서버간에 소통을 할 때 지켜야할 통신규약입니다. 먼저 클라이언트가 서버에게 요청을 보내고 서버는 그에 맞는 응답을 보낸 후 접속을 종료합니다.
통신이 끝나면 상태정보를 유지하지 않는 특징이 있습니다. 예를 들어 인증에 필요한 상태정보를 말이죠. 그래서 통신을 할 때마다 새로 연결을 해주어야 합니다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;물론 지속적으로 통신을 연결하지 않는 것은 자원을 낭비하지 않는 장점이 있을 수 있지만, 통신을 할 때마다 인증을 해주어야 합니다.&lt;br /&gt;
이런 경우 반복적인 인증작업이 필요한데 이런 면에서 비효율적이게 됩니다. 유저도 불편하겠죠. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 이런 정보를 따로 저장해두기위한 것이 브라우저 저장소입니다. 브라우저 저장소에는 쿠키와 웹 스토리지가 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;쿠키&quot;&gt;쿠키&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
쿠키는 서버가 클라이언트에게 전송하는 작은 데이터 파일이며 이름, 값, 도메인정보, 경로정보, 만료일 등으로 구성됩니다.
쿠키특징은 다음과 같은 것들이 있습니다.&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든브라우저에서 지원함.&lt;/li&gt;
  &lt;li&gt;매번 서버에 전송되고 저장 용량이 작음. (하나의 쿠키는 4KB까지 저장 가능)&lt;/li&gt;
  &lt;li&gt;보안에 취약함.&lt;/li&gt;
  &lt;li&gt;클라이언트에 총 300개의 쿠키를 저장할 수 있고 하나의 도메인 당 20개의 쿠키를 가질 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;웹-스토리지&quot;&gt;웹 스토리지&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
HTML5부터 쿠키의 단점을 보완하여 등장한 것이 웹 스토리지(Web Storage)가 주로 사용됩니다.
웹 스토리지는 쿠키와 기능은 유사하지만, 서버로 전송되지 않고 클라이언트에 저장합니다. 데이터를 저장할 때는 key와 value값으로 저장합니다. 
&lt;br /&gt;&lt;br /&gt;
웹 스토리지는 데이터의 지속성에 따라 Local Storage(로컬 스토리지)와 Session Storage(세션 스토리지)로 나눌 수 있습니다.
차이점은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Local Storage(로컬 스토리지) : 브라우저 자체에 반영구적으로 데이터를 저장하며 브라우저를 닫아도 데이터가 유지되는 특징&lt;/li&gt;
  &lt;li&gt;Session Storage(세션 스토리지) : 윈도우나 브라우저 탭을 닫을 경우에 데이터가 삭제됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;무엇을-사용하는게-좋은가&quot;&gt;무엇을 사용하는게 좋은가?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
이는 각 브라우저 저장소의 특징에 맞게 상황에 따라 사용합니다.&lt;br /&gt;
예를 들어 비로그인 유저 장바구니 기능은 세션스토리지, 자동로그인기능은 로컬스토리지, “일주일간 다시 보지 않기” 창 같은 경우는 쿠키를 사용하면 좋을 것 같습니다.
&lt;br /&gt;&lt;br /&gt;
End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">라이브러리와 프레임워크</title>
      <link href="https://ykkim97.github.io/etc-libraryandframework" rel="alternate" type="text/html" title="라이브러리와 프레임워크" />
      <published>2022-07-22T22:20:00+09:00</published>
      <updated>2022-07-22T22:20:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-libraryandframework</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-libraryandframework">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
오늘은 라이브러리와 프레임워크에 대해서 간단히 정리해보겠습니다.&lt;br /&gt;
개발을 하다보면 이러한 라이브러리를 가져와서 사용한다, 혹은 OO 프레임워크를 사용한다, 뭐 이런 말들을 자주 들어봤을 것입니다.&lt;/p&gt;

&lt;p&gt;뭔가 비슷한거같은데 차이점이 뭘까요?&lt;/p&gt;

&lt;h2 id=&quot;라이브러리&quot;&gt;라이브러리&lt;/h2&gt;

&lt;p&gt;라이브러리는 단순하게 활용가능한 도구들의 집합이라고 할 수 있습니다. 개발자가 필요할 때 라이브러리를 호출해서 사용합니다. 
개발자가 원할 때 함수나 기능의 모음인 라이브러리를 가져다 쓰는 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;프레임워크&quot;&gt;프레임워크&lt;/h2&gt;

&lt;p&gt;프레임워크는 뼈대, 기반구조이며 “소프트웨어의 특정 문제를 해결하기 위해서 상호 협력하는 클래스와 인터페이스의 집합”입니다. 뭔가 와닿지는 않을 것입니다. 어떤 완성된 어플리케이션이 아니라 개발자가 이 프레임워크를 가지고 프레임워크만의 규칙에 맞게 코드를 프레임워크안에 짜넣어서 개발한다고 보면 되겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;

&lt;p&gt;쉽게 정리하자면, &lt;br /&gt;
필요할 때 개발자가 호출해서 가져다 쓴다면? 👉🏼 라이브러리&lt;br /&gt;
개발자가 프레임워크에 맞춰서 코드를 작성하고 사용한다면? 👉🏼 프레임워크&lt;br /&gt;
&lt;br /&gt;
End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">CSR, SSR, SSG의 차이</title>
      <link href="https://ykkim97.github.io/etc-csrssrssg" rel="alternate" type="text/html" title="CSR, SSR, SSG의 차이" />
      <published>2022-07-21T23:10:00+09:00</published>
      <updated>2022-07-21T23:10:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-csrssrssg</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-csrssrssg">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
오늘은 CSR, SSR, SSG 방식의 차이를 정리해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;csr&quot;&gt;CSR&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
CSR(Client-Side-Rendering)은 클라이언트 사이드 렌더링의 약자입니다. 말그대로 클라이언트 쪽에서 렌더링을 하는 것을 말하는 것입니다.&lt;br /&gt;
빈 HTML을 서버로부터 클라이언트가 받게되고, 추가적으로 어플리케이션에서 필요한 자바스크립트파일을 다운받게 됩니다. 이 파일은 어플리케이션에서
필요한 로직들과 어플리케이션을 구동하는 프레임워크와 라이브러리의 소스코드들이 포함되어있습니다. 이것들은 파일사이즈가 커서 다운로드 받는데 시간이
오래걸릴 수 있습니다. 추가로 필요한 데이터가 있으면 서버에 요청해서 데이터를 받아오며, 이것들을 기반으로 동적으로 HTML을 생성하게 됩니다. 
&lt;br /&gt;&lt;br /&gt;
CSR은 필요한 부분만 요청하고 응답하기 때문에 서버의 부하가 적고, 초기 로딩이후 속도가 빠릅니다.  그리고TTV와 TTI의 간극이 없어 페이지가 무응답하지 않고 잘 동작합니다. &lt;br /&gt;&lt;br /&gt;
하지만, 단점도 존재합니다. &lt;br /&gt;
이런 CSR(클라이언트 사이드 렌더링)의 문제점은 뭐가 있을까요?
일단 사용자가 웹사이트의 처음화면을 보기까지 오래걸릴 수 있다는 것이고, 좋지 않은 SEO가 있겠습니다.&lt;br /&gt;
검색엔진들이 서버에 등록된 웹사이트들을 하나하나 분석하여, 검색시에 웹사이트를 빠르게 검색할 수 있도록 도와줍니다. CSR방식의 HTML은 대부분 비어져있기 때문에,
검색엔진들이 사이트를 분석하기 어려워합니다. 구글에서는 개선이 되었다고는 하지만 여전히 SEO가 좋지 못합니다.&lt;/p&gt;

&lt;h2 id=&quot;ssr&quot;&gt;SSR&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
SSR(Server Side Rendering)은 서버 사이드 렌더링의 약자입니다. 서버측에서 렌더링하는 것이겠지요.&lt;br /&gt;
클라이언트의 요청을 받은 즉시, 서버는 화면에 표시하는데 필요한 데이터를 모두 받아와서 HTML을 모두 구성한 다음 브라우저로 전송하는 것입니다.&lt;br /&gt;
브라우저는 받은 페이지를 바로 화면에 보여주게 됩니다.&lt;br /&gt;
&lt;br /&gt;
SSR의 장점은, CSR을 사용했을 때 보다 첫 페이지로딩이 빨라지게 되고, 모든 컨텐츠가 HTML에 담겨져 있기 떄문에 좀 더 효율적인 SEO를 할 수 있습니다.&lt;br /&gt;&lt;br /&gt;
하지만 장점만 있는 것이 아닙니다. 요청시마다 새로고침되기 때문에 깜빡임 이슈가 존재합니다. 또한 TTV와 TTI의 간격이 있다는 것입니다. 페이지는 잘 보일지 몰라도 자바스크립트가
아직 적용되지 않은 시간동안에는 페이지가 반응을 하지 못하는 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;ssg&quot;&gt;SSG&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
SSG라는 것도 존재합니다. &lt;br /&gt;
SSG(Static Site Generation)은 자주 업데이트되지 않는 사이트에 좋은데, SSR처럼 서버에서 완성된 HTML을 받아오는 것은 맞지만, HTML 파일의 생성이 빌드타임에서 생성됩니다.&lt;br /&gt;&lt;br /&gt;
그러니까 SSR은 요청이 들어오는 즉시 HTML를 만들어서 응답하고, SSG는 빌드시점에 HTML을 미리 만들어두었다가 요청이 들어오면 만들어둔 완성된 HTML을 보내주는 것에 차이가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로세스와 쓰레드의 차이점</title>
      <link href="https://ykkim97.github.io/etc-processandthread" rel="alternate" type="text/html" title="프로세스와 쓰레드의 차이점" />
      <published>2022-07-12T07:20:00+09:00</published>
      <updated>2022-07-12T07:20:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-processandthread</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-processandthread">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오늘은 프로세스와 쓰레드에 대해서 정리해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;프로세스-쓰레드&quot;&gt;프로세스? 쓰레드?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
프로세스는 한마디로 실행중인 프로그램이라고 할 수 있습니다. &lt;br /&gt;
여기서또 프로그램과 프로세스를 혼동할 수 있는데 프로그램은 실행가능한 명령어들의 집합입니다.
&lt;br /&gt;
&lt;br /&gt;
그러면 쓰레드는 뭘까요?
&lt;br /&gt;
그 프로세스 내에서 동작되는 여러 실행의 흐름입니다.&lt;/p&gt;

&lt;h2 id=&quot;둘의-차이점&quot;&gt;둘의 차이점&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
프로세스는 최소 하나의 쓰레드를 보유하고 있고 각각 별도의 주소공간을 할당받습니다. 독립적이죠.
그런데 쓰레드는 Stack을 제외하고 Code, Data, Heap의 나머지 영역을 서로 공유합니다.&lt;/p&gt;

&lt;h2 id=&quot;프로세스-메모리-영역&quot;&gt;프로세스 메모리 영역&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
잠깐 프로세스 메모리 영역에 대해서 알아보겠습니다.
&lt;br /&gt;&lt;br /&gt;
커널 메모리 안에서 관리되는 PCB(Process Control Block) 정보외에 유저가 사용하는 메모리안의 프로세스 정보는 4가지가 있는데, Code, Data, Heap, Stack이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code: 프로그램의 실제 코드 저장&lt;/li&gt;
  &lt;li&gt;Data: 프로세스가 실행될 때 정의된 전역 변수. Static 변수들을 저장&lt;/li&gt;
  &lt;li&gt;Heap: 프로세스 런타임 중 동적할당 변수들을 저장&lt;/li&gt;
  &lt;li&gt;Stack: 호출된 함수의 수행을 마치고 복귀할 주소 및 데이터(지역변수, 매개변수, 리턴값 등)를 임시로 저장하는 공간이고 함수 호출 시에 기록하고 끝나면 사라진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;멀티프로세스-vs-멀티쓰레드&quot;&gt;멀티프로세스 vs 멀티쓰레드&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
멀티프로세스는 하나의 프로그램을 여러개의 프로세스로 구성하여 각각의 프로세스가 하나의 작업을 처리하는 것이고 멀티쓰레드는, 하나의 프로그램을 여러개의 쓰레드로 구성하고 각 쓰레드가 하나의 작업을 처리하는 것입니다. 자세한 차이점은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;멀티프로세스는 각 프로세스가 독립적이고 쓰레드는 서로 긴밀하게 연결되어있습니다.&lt;/li&gt;
  &lt;li&gt;멀티프로세스는 IPC를 사용한 통신을 해야하는데, 쓰레드는 공유된 자원으로 통신비용이 절감됩니다.&lt;/li&gt;
  &lt;li&gt;멀티프로세스는 개별 메모리를 차지하는데 쓰레드는 자원을 공유하기 때문에 좀더 효율적입니다.&lt;/li&gt;
  &lt;li&gt;멀티프로세스는 Context Switching 비용이 멀티쓰레드보다 비효율적입니다.&lt;/li&gt;
  &lt;li&gt;멀티프로세스는 동기화작업이 필요하지 않고, 멀티쓰레드는 공유자원을 관리해야 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">번들링이 뭔데?</title>
      <link href="https://ykkim97.github.io/etc-whatisbundle" rel="alternate" type="text/html" title="번들링이 뭔데?" />
      <published>2022-07-10T07:20:00+09:00</published>
      <updated>2022-07-10T07:20:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-whatisbundle</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-whatisbundle">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오늘은 번들링이 무엇인지, 번들링을 하는 이유가 뭔지 간단히 알아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;번들링에-대해&quot;&gt;번들링에 대해&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
우리가 웹사이트를 만들다보면 자바스크립트, CSS, 이미지와 같은 정말 많은 파일들이 생겨나게 됩니다.
그래서 웹사이트를 로딩해보면 그 수많은 파일들이 다운로드되는 것을 확인할 수 있는데, 이는 서버와의 접속이 많아지게 되고 어플리케이션이 느려지게 됩니다. 
&lt;br /&gt;
또한 여러 많은 JS패키지를 사용하다보면 각각의 패키지들이 서로 같은 변수명, 함수명을 사용하여 예상치 못한 충돌이 발생할 수도 있습니다.
&lt;br /&gt;
&lt;br /&gt;
이러한 문제를 해결할 수 있는 것이 “번들러”입니다. 어플리케이션을 구성하는 여러 파일들을 하나의 파일로 병합해주는 과정을 번들링이라고 하고 그걸을 하는 것이 번들러입니다.
대표적으로 Webpack이 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;번들링의-장점&quot;&gt;번들링의 장점&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;번들링하지 않은 경우는 각 파일마다 서버에 요청해서 자원을 얻어와야했는데, 번들링하면 하나의 파일로 만들어지기 때문에 페이지 로딩이 빨라지고 네트워크 접속의 부담을 줄일 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Webpack에서는 로더(Loader)를 통해 바벨이라는 ES6+ 문법을 ES5로 변환할 수 있도록하는 트랜스파일러를 사용할 수 있습니다. 오래된 브라우저에서도 동작할 수 있도록 해주는 장점이 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;번들러는 자바스크립트 파일을 기능 단위로 모듈화 하고 이것을 묶어 관리할 수 있게 합니다. 번들러를 사용함으로써 소스 코드를 모듈별로 작성할 수 있고 모듈간 혹은 외부 라이브러리의 의존성을 쉽게 관리 할 수 있습니다.
&lt;br /&gt;
&lt;br /&gt;
이외에도 많은 장점이 있을 수 있지만 3가지 정도만 정리해봤습니다.
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">DOM이란?</title>
      <link href="https://ykkim97.github.io/etc-dom" rel="alternate" type="text/html" title="DOM이란?" />
      <published>2022-07-07T07:20:00+09:00</published>
      <updated>2022-07-07T07:20:00+09:00</updated>
      <id>https://ykkim97.github.io/etc-dom</id>
      <content type="html" xml:base="https://ykkim97.github.io/etc-dom">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;기타 포스팅입니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-firebasedbrules&quot;&gt;Firebase DB에서 값을 불러올 수 없는 문제 해결&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-browser&quot;&gt;브라우저 동작 원리&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-dom&quot;&gt;DOM이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-bubbling&quot;&gt;이벤트 버블링과 캡처링&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-whatisbundle&quot;&gt;번들링이 뭔데?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-processandthread&quot;&gt;프로세스와 쓰레드의 차이점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-csrssrssg&quot;&gt;CSR, SSR, SSG의 차이&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-libraryandframework&quot;&gt;라이브러리와 프레임워크&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-webstorage&quot;&gt;쿠키와 웹스토리지에 대해&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-crossbrowsing&quot;&gt;크로스 브라우징이란?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-vscodekey&quot;&gt;알면 유용한 vscode 단축키들&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-httphttps&quot;&gt;HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./etc-getandpost&quot;&gt;GET과 POST의 특징&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
DOM을 어느정도는 대충 알지만 누군가가 DOM이 무엇이냐고 다짜고짜 묻는다면 명확히 대답하기 어려웠습니다.
그래서 DOM에 대해서 공부한 내용을 간략히 정리해보려고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;dom-&quot;&gt;DOM ?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
DOM은 Document Object Model의 약자입니다. 문서 객체 모델이라고도 합니다.
그냥 문서 객체 모델? 로 해석하려고 하면 잘 이해가 되지 않습니다.
&lt;br /&gt;
&lt;br /&gt;
쉽게 정리하면 DOM은 HTML 코드를 해석해서 요소들을 트리형태로 구조화해 표현하는 형식입니다. 
&lt;br /&gt;
&lt;br /&gt;
그러니까 브라우저가 HTML 코드를 해석해서 트리 형태로 구조화해서 표현하는 문서(데이터)를 생성하게 되는데 이게 DOM인 것입니다. 브라우저는 DOM을 통해서 화면에 웹 컨텐츠를 렌더링합니다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dom의-목적&quot;&gt;DOM의 목적&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
HTML코드를 해석해서 그대로 브라우저에 렌더링해주는 것이 브라우저의 역할인데 왜 중간에 DOM을 형성하는 걸까요?
&lt;br /&gt;
&lt;br /&gt;
자바스크립트를 사용해서 이 문서에 대한 스크립트를 작성할 수 있게 해주는 데 목적이 있기 때문입니다.
&lt;br /&gt;
&lt;br /&gt;
DOM은 자바스크립트를 사용해서 웹 컨텐츠를 추가, 수정, 삭제, 이벤트 처리 등을 정의할 수 있도록 제공되는
프로그래밍 인터페이스입니다. 
&lt;br /&gt;
&lt;br /&gt;
자바스크립트가 어떤 동작을 구현하면 DOM에 그 결과가 반영되어 웹브라우저 화면이 다시 렌더링됩니다. HTML 코드는 정적인데, 화면이 사용자와 동적인 상호작용을 하는데 DOM이 그 역할을 해주는 것입니다.
&lt;br /&gt;
&lt;br /&gt;
End.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>ykkim97</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">기타 포스팅입니다. Firebase DB에서 값을 불러올 수 없는 문제 해결 브라우저 동작 원리 DOM이란? 이벤트 버블링과 캡처링 번들링이 뭔데? 프로세스와 쓰레드의 차이점 CSR, SSR, SSG의 차이 라이브러리와 프레임워크 쿠키와 웹스토리지에 대해 크로스 브라우징이란? 알면 유용한 vscode 단축키들 HTTP와 HTTPS의 차이점, HTTPS의 과정 및 장점 GET과 POST의 특징</summary>
      

      
      
    </entry>
  
</feed>
